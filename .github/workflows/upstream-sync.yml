name: 上游仓库同步（第三方Action）

permissions:
  contents: write

on:
  # 定时触发 - 每天凌晨 3 点运行
  schedule:
    - cron: "0 3 * * *"
  
  # 允许手动触发
  workflow_dispatch:
    inputs:
      source_repo:
        description: '源仓库 (格式: owner/repo)'
        required: false
        default: 'cmliu/edgetunnel'
      target_branch:
        description: '目标分支名称'
        required: false
        default: 'main'
      upstream_branch:
        description: '上游分支名称'
        required: false
        default: 'main'

env:
  # 配置要同步的源仓库
  SOURCE_REPO: ${{ github.event.inputs.source_repo || 'cmliu/edgetunnel' }}
  UPSTREAM_BRANCH: ${{ github.event.inputs.upstream_branch || 'main' }}
  TARGET_BRANCH: ${{ github.event.inputs.target_branch || 'main' }}

jobs:
  sync_latest_from_upstream:
    name: 同步上游仓库最新提交
    runs-on: ubuntu-latest
    
    steps:
      # 步骤 1: 检出目标仓库
      - name: 检出目标仓库
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      # 步骤 2: 运行同步Action
      - name: 同步上游更改
        id: sync
        uses: aormsby/Fork-Sync-With-Upstream-action@v3.4
        with:
          upstream_sync_repo: ${{ env.SOURCE_REPO }}
          upstream_sync_branch: ${{ env.UPSTREAM_BRANCH }}
          target_sync_branch: ${{ env.TARGET_BRANCH }}
          target_repo_token: ${{ secrets.GITHUB_TOKEN }}
          
          # 设置为false以执行真实的同步操作
          test_mode: false

      # 步骤 3: 同步状态检查
      - name: 同步状态检查
        if: failure()
        run: |
          echo "❌ 同步失败！"
          echo "源仓库: ${{ env.SOURCE_REPO }}"
          echo "上游分支: ${{ env.UPSTREAM_BRANCH }}"
          echo "目标分支: ${{ env.TARGET_BRANCH }}"
          echo "时间: $(date '+%Y-%m-%d %H:%M:%S UTC')"
          echo ""
          echo "可能的原因："
          echo "1. 上游仓库的工作流文件发生变更，GitHub自动暂停了同步"
          echo "2. 源仓库不存在或无法访问"
          echo "3. 分支名称不正确"
          echo "4. 权限设置问题"
          echo ""
          echo "解决方案："
          echo "1. 手动执行一次 Sync Fork 操作"
          echo "2. 检查源仓库和分支名称是否正确"
          echo "3. 确保仓库权限设置正确"
          exit 1

      # 步骤 4: 成功通知
      - name: 同步成功通知
        if: success()
        run: |
          echo "✅ 同步成功！"
          echo "源仓库: ${{ env.SOURCE_REPO }}"
          echo "上游分支: ${{ env.UPSTREAM_BRANCH }}"
          echo "目标分支: ${{ env.TARGET_BRANCH }}"
          echo "时间: $(date '+%Y-%m-%d %H:%M:%S UTC')"
          echo ""
          echo "已成功同步上游仓库的最新更改，包括工作流文件。"

  # 失败通知任务
  notify-on-failure:
    runs-on: ubuntu-latest
    needs: sync_latest_from_upstream
    if: failure()
    
    steps:
    - name: 发送失败通知
      run: |
        echo "❌ 上游同步失败！"
        echo "仓库: ${{ env.SOURCE_REPO }}"
        echo "时间: $(date '+%Y-%m-%d %H:%M:%S UTC')"
        echo ""
        echo "详细信息："
        echo "- 源仓库: ${{ env.SOURCE_REPO }}"
        echo "- 上游分支: ${{ env.UPSTREAM_BRANCH }}"
        echo "- 目标分支: ${{ env.TARGET_BRANCH }}"
        echo ""
        echo "常见问题排查："
        echo "1. 检查源仓库是否存在且可访问"
        echo "2. 验证分支名称是否正确"
        echo "3. 确认仓库权限设置"
        echo "4. 查看详细的工作流日志"
        echo ""
        echo "如果是工作流文件冲突，请手动执行一次 Sync Fork 操作。"
